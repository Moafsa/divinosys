# Coolify deployment configuration for Divino Lanches
# This file defines all services for production deployment

services:
  # Main application (PHP + React)
  app:
    image: ${IMAGE_APP:-divino-lanches-app:latest}
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - APP_ENV=production
      - APP_URL=${APP_URL}
      - WUZAPI_URL=http://wuzapi:8080
      - WUZAPI_API_KEY=${WUZAPI_API_KEY}
      # AI Integration
      - USE_N8N_AI=${USE_N8N_AI:-false}
      - AI_N8N_WEBHOOK_URL=${AI_N8N_WEBHOOK_URL}
      - AI_N8N_TIMEOUT=${AI_N8N_TIMEOUT:-30}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      # Asaas Payment Gateway
      - ASAAS_API_KEY=${ASAAS_API_KEY:-}
      - ASAAS_API_URL=${ASAAS_API_URL:-https://sandbox.asaas.com/api/v3}
      - ASAAS_WEBHOOK_URL=${ASAAS_WEBHOOK_URL:-}
    volumes:
      - uploads:/var/www/html/uploads
      - logs:/var/www/html/logs
      - backups:/var/www/html/backups
    depends_on:
      - postgres
      - redis
      - mcp-server
      - n8n
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    labels:
      - "coolify.managed=true"

  # Redis Cache
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    labels:
      - "coolify.managed=true"

  # Wuzapi (WhatsApp Integration)
  wuzapi:
    image: ${IMAGE_WUZAPI:-divino-wuzapi:latest}
    build:
      context: ./docker/wuzapi
      dockerfile: Dockerfile
    environment:
      - PORT=8080
      - API_KEY=${WUZAPI_ADMIN_TOKEN:-admin123456}
      - DB_HOST=${DB_HOST}
      - DB_PORT=5432
      - DB_NAME=wuzapi
      - DB_USER=wuzapi
      - DB_PASSWORD=${WUZAPI_DB_PASSWORD:-wuzapi}
      - WUZAPI_URL=http://wuzapi:8080
      - WEBHOOK_URL=${APP_URL}/webhook/wuzapi.php
    volumes:
      - wuzapi_sessions:/app/sessions
      - wuzapi_logs:/app/logs
    depends_on:
      - postgres
    restart: unless-stopped
    labels:
      - "coolify.managed=true"

  # MCP Server (Model Context Protocol for AI)
  mcp-server:
    image: ${IMAGE_MCP:-divino-mcp-server:latest}
    build:
      context: ./n8n-mcp-server
      dockerfile: Dockerfile
    environment:
      - MCP_PORT=3100
      - DB_HOST=${DB_HOST}
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - API_KEY=${MCP_API_KEY}
      - NODE_ENV=production
    volumes:
      - mcp_logs:/app/logs
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      - "coolify.managed=true"
      - "coolify.type=service"

  # n8n (Workflow Automation)
  n8n:
    image: n8nio/n8n:latest
    environment:
      # Authentication
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      # Host Configuration
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      # Environment
      - NODE_ENV=production
      - WEBHOOK_URL=https://${N8N_HOST}/
      # Timezone
      - GENERIC_TIMEZONE=America/Sao_Paulo
      # Execution Settings
      - EXECUTIONS_PROCESS=main
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=all
      - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=true
      # Logging
      - N8N_LOG_LEVEL=info
      - N8N_LOG_OUTPUT=console
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - mcp-server
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "coolify.managed=true"
      - "coolify.type=service"
      - "coolify.domain=${N8N_HOST}"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local
  logs:
    driver: local
  backups:
    driver: local
  wuzapi_sessions:
    driver: local
  wuzapi_logs:
    driver: local
  mcp_logs:
    driver: local
  n8n_data:
    driver: local